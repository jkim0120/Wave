<%= Gon::Base.render_data %>

<div class="canvas-container">
  <svg class="canvas"></svg>
</div>

<%= javascript_tag do %>
  <%= render partial: 'shared/svg.js.erb' %>
  multiUserWave = true
  var waver = currentUser.id === gon.waverId // if true => waver, else => tester
  var eventSource = new EventSource(`https://api.particle.io/v1/devices/${ currentUser.onlineTracker }/events/?access_token=${ currentUser.token }`)
  var iterations = 7

  if (currentUser.id === gon.testerId || currentUser.id === gon.waverId) {
    var firebase = new Firebase(firebaseUrl)

    var ref = firebase.child('users').child(gon.testerId).child('wave_sessions').child(gon.waverId)

    function closeSession() {
      $('.modal-content').empty()
      $.ajax({
        url: '/users/' + gon.testerId + '/wave_sessions/' + gon.waverId,
        type: 'DELETE',
        dataType: 'script',
        data: { waver_id: gon.waverId },
        success: function() {
          ref.remove()
        }
      })
    }

    $(".modal-fade-screen, .modal-close").on("click", function() {
      if (!waver) closeSession()
      $('.modal-content').empty()
      eventSource.close()
      multiUserWave = false
      counter = 0
    });

    $(window).on('page:before-change', function() {
      if (!waver) closeSession()
      eventSource.close()
      multiUserWave = false
      counter = 0
    })

    function tester() { // For user who started test
      var clickCounter = 0
      var lock = false

      ref.child('clear').on('child_added', function() { // clear whenever waver's screen clears
        clear()
        pointer = undefined
        lock = false

        if (clickCounter >= iterations) {
          getResults()
          return
        } else {
          clickForTarget()
        }
      })

      ref.child('tracker').on('child_added', function (tracker) { // trackers waver's pointer
        var x = tracker.val().x,
            y = tracker.val().y,
            r = tracker.val().r

        if (pointer === undefined) pointer = makeCircle(x, y, r, '#ddd')
        pointer.transition().duration(500).attr('cx', x).attr('cy', y).attr('r', r).ease('cubic-in')
      })

      function getResults() {
        clear()
        ref.child('results').once('child_added', function(r) {
          results(r.val().average_time, r.val().accuracy)
        })
      }

      function clickForTarget() {
        var waveColor = ['#f58d9a', '#88eef3', '#f3ec95', '#f2a9f5', '#befed2'],
            circleColor = ['#dc7d88', '#7edbdf', '#f1ea93', '#e797e9', '#b6f5cb' ],
            coordinatePush = ref.child('target')

        $('.canvas').unbind('click').one('click', function(e) {
            lock = true
            clickCounter++
            var x = e.pageX - $('.canvas').offset().left,
                y = e.pageY - $('.canvas').offset().top,
                s = (Math.random() * 75) + 25,
                r = s + 25
            pulse(x, y, s, r, 300, 3000, true, circleColor[clickCounter % 5], waveColor[clickCounter % 5])

            coordinatePush.push({'x': x, 'y': y, 's': s, 'r': r, 'circleColor': circleColor[clickCounter % 5], 'waveColor': waveColor[clickCounter % 5]})
        })
      }

      clickForTarget()
    }

    function trackerReady() {
      var lock = false
      ref.on('value', function(r) {
        if (!lock) {
          if (r.val().ready) {
            lock = true
            clear()
            pulse(width / 2, height / 2, 75, 300, 700, 2500, false, '#b6f5cb', '#befed2')
            tester()
          } else {
            pulse(width / 2, height / 2, 40, 50, 150, 5000, true, '#f5f5f5', '#f5f5f5')
            var status = canvas.append('text')
            .text('Waiting for ' + gon.waverName + '...')
            .attr('class', 'canvas-text asleep')
            .attr('x', width / 2)
            .attr('y', height / 2)
            .attr('dy', '7')
            .style('text-anchor', 'middle')
          }
        }
      })
    }

    function waverReady() {
      clear()
      start('#b6f5cb', '#befed2')

      $('.wave-test-start, .canvas-text').one('click', function() {
        clear()
        pulse(width / 2, height / 2, 75, 300, 700, 2500, false, '#b6f5cb', '#befed2')

        ref.update({'ready': true}, function(error) {
          if (!error) setTimeout(function() { startWave() }, 2000)
        })
      })

      function startWave() {
        clear()
        startSession()

        var counter = 0,
            t1, t2,
            coordinates,
            timeData = [],
            accuracyData = [],
            trackerOffline = false

        function sendClear() {
          ref.child('clear').push({'cleared': true})
          ref.child('target').remove()
          coordinates = undefined
          clear()
        }

        if (debug) {
          $('.canvas').on('click', function(e) {
            console.log('click')
            var x = e.pageX - $('.canvas').offset().left,
                y = e.pageY - $('.canvas').offset().top,
                r = 10

            if (coordinates !== undefined) {
              var minDistance = r + coordinates.r,
                  currentDistance = distance(x, y, coordinates.x, coordinates.y)
            }

            if (currentDistance < minDistance) {
              t2 = performance.now()
              timeData.push(timer(t1, t2))
              console.log('time:' + timeData)
              accuracyData.push(accuracy(currentDistance, minDistance))
              console.log('accr:' + accuracyData)
              pointer = undefined
              sendClear()
              startSession()
            }
          })
        }

        var waveTracker = function(e) {
          var rawData = JSON.parse(e.data),
              parsedData = JSON.parse(rawData.data),
              x = width * parsedData.X / 1000,
              y = height * parsedData.Y / 800,
              r = parsedData.Size * 7

          ref.child('tracker').push({'x': x, 'y': y, 'r': r})

          if (coordinates !== undefined) {
            var minDistance = r + coordinates.r,
                currentDistance = distance(x, y, coordinates.x, coordinates.y)
          }

          if (pointer === undefined) pointer = makeCircle(x, y, r, '#ddd')
          pointer.transition().duration(500).attr('cx', x).attr('cy', y).attr('r', r).ease('cubic-in')

          setTimeout(function() {
            if (currentDistance < minDistance) {
              t2 = performance.now()
              timeData.push(timer(t1, t2))
              console.log('time:' + timeData)
              accuracyData.push(accuracy(currentDistance, minDistance))
              console.log('accr:' + accuracyData)
              pointer = undefined
              sendClear()
              startSession()
            }
          }, 500)
        }

        eventSource.addEventListener('Coordinates', waveTracker, false)

        function startSession() {
          if (counter >= iterations) {
            counter = 0
            eventSource.close()
            console.log('closed')

            ref.child('results').on('value', function(skeleton) {
              function average(dataArray) {
                var sum = dataArray.reduce(function(a, b) { return a + b })
                return sum / dataArray.length
              }

              var averageTime = Math.round(average(timeData) / 10) / 100,
              averageAccuracy = Math.round(average(accuracyData) * 10000) / 100

              ref.child('results').push({'average_time': averageTime, 'accuracy': averageAccuracy})
            })

            submitResults(timeData, accuracyData)
            return
          } else {

            ref.child('target').once('child_added', function(target) {
              t1 = performance.now()
              console.log(t1)
              pulse(target.val().x, target.val().y, target.val().s, target.val().r, 300, 3000, true, target.val().waveColor, target.val().circleColor)

              var coord = new Object()
              coord['x'] = target.val().x; coord['y'] = target.val().y; coord['r'] = target.val().r
              coordinates = coord
              console.log(coordinates)
              counter++
              console.log(counter)
            })

          }
        }
      }
    }

    function status(id, accessToken) {
      var url = 'https://api.spark.io/v1/devices/' + id + '?access_token=' + accessToken

      $.ajax({
        type: 'GET',
        url: url,
        beforeSend: function() {
          $('.modal-inner').append('<div class="loading"></div>')
        },
        success: function(data) {
          $('.modal-inner .loading').remove()
          if (data.connected) waverReady()
          else trackerAsleep()
        },
        error: function() {
          $('.modal-inner .loading').remove()
          trackerAsleep()
        },
        dataType: 'json'
      })
    }

    if (!waver) trackerReady()
    else status(currentUser.onlineTracker, currentUser.token)
  }


    // var waveTracker = function(e) {
    //   var rawData = JSON.parse(e.data),
    //       parsedData = JSON.parse(rawData.data),
    //       x = width * parsedData.X / 1000,
    //       y = height * parsedData.Y / 800,
    //       r = parsedData.Size * 7
    //   var minDistance = r + coordinates.r,
    //       newDistance = distance(x, y, coordinates.x, coordinates.y)

    //   if (pointer === undefined) pointer = makeCircle(x, y, r, '#ddd')
    //   pointer.transition().duration(500).attr('cx', x).attr('cy', y).attr('r', r).ease('cubic-in')

    //   setTimeout(function() {
    //     if (newDistance < minDistance) {
    //       t2 = performance.now()
    //       timeData.push(timer(t1, t2))
    //       accuracyData.push(accuracy(newDistance, minDistance))
    //       pointer = undefined
    //       clear()
    //       test(5)
    //     }
    //   }, 500)
    // }




            // r = 10
        // var minDistance = r + coordinates.r,
        //     newDistance = distance(x, y, coordinates.x, coordinates.y)

        // if (newDistance < minDistance) {
        //   // eventSource.close()
        //   t2 = performance.now()
        //   timeData.push(timer(t1, t2))
        //   accuracyData.push(accuracy(newDistance, minDistance))
        //   clear()
        //   test(5)
        // }
      // })

      // if (counter == iterations) {
      //   eventSource.close()
      //   submitResults(timeData, accuracyData)
      //   return
      // } else {
      //   t1 = performance.now()
      //   coordinates = generateTarget(width, height, circleColor[counter % 5], waveColor[counter % 5])
      //   eventSource.addEventListener('Coordinates', waveTracker, false)
      //   counter++
      // }
    // }

    // initWave()
<% end %>