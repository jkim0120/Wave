<% if @user == current_user || current_user.friends?(@user) %>
  <div class="progress">
    <h3>Progress</h3>

    <div class="graph-container">
      <svg class="graph"></svg>
    </div>

    <%= javascript_tag do %>
      var data1 = [
        {'date': d3.time.day.offset(new Date(), -6), 'time': 1},
        {'date': d3.time.day.offset(new Date(), -5), 'time': 9},
        {'date': d3.time.day.offset(new Date(), -4), 'time': 7},
        {'date': d3.time.day.offset(new Date(), -3), 'time': 5},
        {'date': d3.time.day.offset(new Date(), -2), 'time': 8},
        {'date': d3.time.day.offset(new Date(), -1), 'time': 3},
        {'date': new Date(), 'time': 2}
      ]

      var data2 = [
        {'date': d3.time.day.offset(new Date(), -6), 'time': 0.5},
        {'date': d3.time.day.offset(new Date(), -5), 'time': 0.3},
        {'date': d3.time.day.offset(new Date(), -4), 'time': 0.56},
        {'date': d3.time.day.offset(new Date(), -3), 'time': 0.8},
        {'date': d3.time.day.offset(new Date(), -2), 'time': 0.1},
        {'date': d3.time.day.offset(new Date(), -1), 'time': 0.4},
        {'date': new Date(), 'time': 0.9}
      ]

      var data = data1
      var time = true

      // .filter(function(d) {
      //   if (d.date < d3.time.day.offset(new Date(), -1)) return false
      //   else return true
      // })

      // data.forEach(function(d) {
      //   d.date = new Date(d.date * 1000)
      //   d.time = d.time
      // })

      var startDay = -1

      var margin = {top: 30, right: 20, bottom: 50, left: 50},
          w = 700 - margin.left - margin.right,
          h = 250 - margin.bottom - margin.top

      var bisectDate = d3.bisector(function(d) { return d.date }).left

      var graph = d3.select('.graph')
                  .attr('width', w + margin.left + margin.right)
                  .attr('h', h + margin.left + margin.right)

      var svg = graph.append('g').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')

      svg.append("defs").append("clipPath")
         .attr("id", "clip")
         .append('rect').attr('width', w + margin.left).attr('height', h)

      var x = d3.time.scale()
          .domain([d3.time.day.offset(new Date, startDay), d3.time.day.offset(new Date, startDay + 2)])
          .nice(d3.time.day)
          .range([margin.left, w]);

      var y = d3.scale.linear()
          .domain([0, d3.max(data, function(d) { return Math.round(d.time/5) * 5 })])
          .range([h, 0]);

      var xAxis = d3.svg.axis().scale(x).ticks(d3.time.day, 1).tickFormat(d3.time.format('%b %d')).orient('bottom')
      var yAxis = d3.svg.axis().scale(y).ticks(5).orient('left')

      var line = d3.svg.line()
          .interpolate('linear')
          .x(function(d) { return x(d.date); })
          .y(function(d) { return y(d.time); });

      svg.append("g")
          .attr("class", "x axis")
          .attr('transform', 'translate(0,' + h + ')')
          .call(xAxis)
          .append("text")
          .attr('class', 'x-label')
          .attr("x", (w + margin.left)/2)
          .attr("y", margin.top)
          .attr("dy", ".71em")
          .style("text-anchor", "middle")
          .text("Date");

      svg.append("g")
          .attr("class", "y axis")
          .call(yAxis)
          .append("text")
          .attr('class', 'y-label')
          .attr("transform", "rotate(-90)")
          .attr("x", -h/2)
          .attr("y", -margin.left)
          .attr("dy", ".71em")
          .style("text-anchor", "middle")
          .text("Average Time");

      var path = svg.append("g")
          .append("path")
          .attr("clip-path", "url(#clip)")
          .datum(data)
          .attr("class", "line")
          .attr('stroke', '#b6f5cb')
          .attr("d", line);

      d3.selectAll('.y.axis .tick').select('line').attr('x2', w + margin.left)

      var focus = svg.append('g').append('circle').attr('class', 'focus').attr('r', 3).attr('fill', '#8ed89c').attr('transform', 'translate(' + x(data[data.length - 1].date) + ',' + y(data[data.length - 1].time) +')')

      svg.append('rect').attr('width', w).attr('height', h).style('fill', 'none').style('pointer-events', 'all')
        .on("mousemove", mousemove);

      var index = data.length - 1

      function mousemove() {
        var x0 = x.invert(d3.mouse(this)[0])
        i = bisectDate(data, x0, 1),
        d0 = data[i - 1],
        d1 = data[i],
        d = x0 - d0.date > d1.date - x0 ? d1 : d0
        index = data.indexOf(d)

        focus.select('circle.y').attr('transform', 'translate(' + x(d.date) + ',' + y(d.time) + ')')
      }


      function updateData(time) {
        var svg = d3.select("body").transition()

        function updateAttributes(yScaleRoundUp, focusColor, lineColor, axisLabel) {
          y.domain([0, d3.max(data, function(d) { return Math.round(d.time/yScaleRoundUp) * yScaleRoundUp })])
          focus.attr('fill', focusColor)
          svg.select('.line').attr('stroke', lineColor)
          svg.select('.y-label').text(axisLabel);
        }

        if (time) {
          updateAttributes(5, '#8ed89c', '#b6f5cb', 'Average Time')
        } else {
          updateAttributes(0.5, '#e57473', '#f58d9a', 'Accuracy')
        }

        x.domain([d3.time.day.offset(new Date, startDay), d3.time.day.offset(new Date, startDay + 2)]).nice(d3.time.day)

        svg.select('.x.axis')
            .duration(750)
            .call(xAxis);
        svg.select('.y.axis')
            .duration(750)
            .call(yAxis);
        svg.select('.line')
           .duration(750)
           .attr('d', line(data))
        svg.selectAll('.y.axis .tick').select('line').duration(750).attr('x2', w + margin.left)
      }

      $(document).keydown(function(e) {
        var d = data[index]
        if (e.which === 37) {
          e.preventDefault()
          if (index - 1 >= 0)
            index--; d = data[index]
            if(x(d.date) < margin.left) {
              startDay--
              updateData(time)
            }
        } else if (e.which === 39) {
          e.preventDefault()
          if (index + 1 < data.length)
            index++; d = data[index]
            if (x(d.date) > w) {
              startDay++
              updateData(time)
            }
        } else if (e.which === 38) {
          e.preventDefault()
          data = data1; d = data[index]
          time = true
          updateData(time)
        } else if (e.which === 40) {
          data = data2; d = data[index]
          time = false
          e.preventDefault()
          updateData(time)
        }
        focus.transition().duration(500).attr('transform', 'translate(' + x(d.date) + ',' + y(d.time) + ')').ease('elastic', 2, 3.5)
      })



    <% end %>

    <style>
      .graph-container {
        box-sizing: border-box;
        width: 100%;
        height: 300px;
        padding: 25px;
      }

      .graph {
        width: 100%;
        height: 100%;
        fill: #888;
        font-size: 0.8em;
        font-family: quicksand;
      }

      .x.axis path,
      .x.axis line {
        fill: none;
        stroke: #ddd;
        shape-rendering: crispEdges;
      }

      .y.axis path {
        fill: none;
        stroke: none;
      }

      .y.axis line {
        fill:none;
        stroke: #eee;
        width: 100%;
      }

      .line {
        fill: none;
        stroke-width: 1.5px;
      }
    </style>


    <p>Average Times: <%= @average_times %></p>
    <p>Accuracy: <%= @accuracy_rates %></p>
  </div>

  <div class="recent-activities-container">
    <h3>Recent Activities</h3>
    <%= render 'stats/recent_activities' %>
  </div>
<% end %>